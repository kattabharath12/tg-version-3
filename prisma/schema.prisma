
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  taxReturns    TaxReturn[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id                String   @id @default(cuid())
  userId            String
  fileName          String
  originalFileName  String
  fileType          String
  fileSize          Int
  cloudStoragePath  String
  documentType      DocumentType
  processingStatus  ProcessingStatus @default(PENDING)
  confidence        Float?
  errorMessage      String?
  uploadedAt        DateTime @default(now())
  processedAt       DateTime?
  
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  extractedData     ExtractedData[]
}

model ExtractedData {
  id          String @id @default(cuid())
  documentId  String
  fieldName   String
  fieldValue  String?
  confidence  Float?
  isVerified  Boolean @default(false)
  isEdited    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model TaxReturn {
  id                    String @id @default(cuid())
  userId                String
  taxYear               Int
  totalIncome           Float @default(0)
  standardDeduction     Float @default(0)
  taxableIncome         Float @default(0)
  estimatedTax          Float @default(0)
  isComplete            Boolean @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taxYear])
}

enum DocumentType {
  W2
  FORM_1099_DIV
  FORM_1099_MISC
  FORM_1099_INT
  FORM_1099_NEC
  FORM_1040
  OTHER
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
